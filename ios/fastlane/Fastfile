default_platform(:ios)

APP_SCHEME = ENV["APP_SCHEME"]
APP_EXPORT_METHOD = ENV["APP_EXPORT_METHOD"]
MATCH_PASSWORD = ENV["MATCH_PASSWORD"]
MATCH_TYPE = ENV["MATCH_TYPE"]
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
APPCENTER_API_TOKEN = ENV["APPCENTER_API_TOKEN"]
APPCENTER_OWNER_NAME = ENV["APPCENTER_OWNER_NAME"]
APPCENTER_APP_NAME = ENV["APPCENTER_APP_NAME"]
TG_BOT_TOKEN = ENV["TG_BOT_TOKEN"]
TG_CHAT_ID = ENV["TG_CHAT_ID"]

platform :ios do
  def delete_temp_keychain(name)
    delete_keychain(
      name: name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
  end

  def create_temp_keychain(name, password)
    create_keychain(
      name: name,
      password: password,
      unlock: false,
      timeout: 0
    )
  end

  def ensure_temp_keychain(name, password)
    delete_temp_keychain(name)
    create_temp_keychain(name, password)
  end

  lane :build do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 1200,
      in_house: true
    )

    increment_build_number(xcodeproj: "diamond.xcodeproj")

    match(
      type: "#{MATCH_TYPE}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      clean: true,
      workspace: "diamond.xcworkspace",
      scheme: APP_SCHEME,
      export_method: APP_EXPORT_METHOD,
      export_options: {
        provisioningProfiles: {
            DEVELOPER_APP_IDENTIFIER => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

    delete_temp_keychain(keychain_name)
  end

  lane :app_center do
    build
    appcenter_upload(
      api_token: APPCENTER_API_TOKEN,
      owner_name: APPCENTER_OWNER_NAME,
      app_name: APPCENTER_APP_NAME,
      ipa: "./diamond_development.ipa",
      notify_testers: true
    )
    telegram(
      token: TG_BOT_TOKEN,
      chat_id: TG_CHAT_ID,
      text: "New ios development release is comming, please download at\n\n#{lane_context[SharedValues::APPCENTER_DOWNLOAD_LINK]}"
    )
  end

  lane :tflight do
    build
    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./diamond.ipa"
    )
    telegram(
      token: TG_BOT_TOKEN,
      chat_id: TG_CHAT_ID,
      text: "New ios production release is comming, please download on Tesflight to start testing"
    )
  end
end
